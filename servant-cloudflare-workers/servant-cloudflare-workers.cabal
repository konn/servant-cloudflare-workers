cabal-version: 3.0
name: servant-cloudflare-workers
version: 0.20.2
synopsis:
  A family of combinators for defining webservices APIs and serving them via Cloudflare Workers

category: Servant, Web
description:
  A family of combinators for defining webservices APIs and serving them via Cloudflare Workers
  .

homepage: http://github.com/konn/servant-cloudflare-workers
bug-reports: http://github.com/konn/servant-cloudflare-workers/issues
license: BSD-3-Clause
license-file: LICENSE
author: Hiromi ISHII
maintainer: haskell-servant-maintainers@googlegroups.com
copyright:
  2014-2016 Zalora South East Asia Pte Ltd, 2016-2019 Servant Contributors, 2024-present Hiromi ISHII

build-type: Simple
tested-with: ghc ==9.10.1
extra-source-files:
  CHANGELOG.md
  README.md

source-repository head
  type: git
  location: http://github.com/konn/servant-cloudflare-workers.git

common extensions
  default-extensions:
    AllowAmbiguousTypes
    ConstraintKinds
    DataKinds
    DeriveAnyClass
    DeriveDataTypeable
    DeriveFunctor
    DeriveGeneric
    DerivingStrategies
    DerivingVia
    DuplicateRecordFields
    EmptyDataDecls
    ExplicitNamespaces
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GADTs
    GeneralizedNewtypeDeriving
    InstanceSigs
    KindSignatures
    LambdaCase
    MultiParamTypeClasses
    NamedFieldPuns
    NoStarIsType
    OverloadedLabels
    OverloadedStrings
    PackageImports
    PolyKinds
    QuantifiedConstraints
    RankNTypes
    RecordWildCards
    ScopedTypeVariables
    TupleSections
    TypeApplications
    TypeFamilies
    TypeOperators
    UndecidableInstances
    ViewPatterns

  default-language: Haskell2010

common ghc-options
  ghc-options:
    -Wall
    -Wcompat
    -Widentities
    -Wincomplete-record-updates
    -Wincomplete-uni-patterns
    -Wpartial-fields
    -Wredundant-constraints
    -fhide-source-paths
    -Wno-unused-do-bind
    -fdicts-strict
    -Wno-unticked-promoted-constructors
    -Werror=unused-imports
    -Wunused-packages

library
  import: extensions
  import: ghc-options
  -- cabal-gild: discover src
  exposed-modules:
    Servant.Cloudflare.Workers
    Servant.Cloudflare.Workers.Assets
    Servant.Cloudflare.Workers.Cache
    Servant.Cloudflare.Workers.Generic
    Servant.Cloudflare.Workers.Internal
    Servant.Cloudflare.Workers.Internal.Context
    Servant.Cloudflare.Workers.Internal.Delayed
    Servant.Cloudflare.Workers.Internal.DelayedIO
    Servant.Cloudflare.Workers.Internal.ErrorFormatter
    Servant.Cloudflare.Workers.Internal.Handler
    Servant.Cloudflare.Workers.Internal.Response
    Servant.Cloudflare.Workers.Internal.RouteResult
    Servant.Cloudflare.Workers.Internal.Router
    Servant.Cloudflare.Workers.Internal.RoutingApplication
    Servant.Cloudflare.Workers.Internal.ServerError
    Servant.Cloudflare.Workers.Prelude
    Servant.Cloudflare.Workers.R2

  -- Bundled with GHC: Lower bound to not force re-installs
  -- text and mtl are bundled starting with GHC-8.4
  build-depends:
    base >=4.16.4.0 && <4.21,
    bytestring >=0.11 && <0.13,
    constraints >=0.2 && <0.15,
    containers >=0.6.5.1 && <0.8,
    mtl ^>=2.2.2 || ^>=2.3.1,
    text >=1.2.3.0 && <2.2,
    transformers >=0.5.2.0 && <0.7,

  -- Servant dependencies
  -- strict dependency as we re-export 'servant' things.
  build-depends:
    http-api-data >=0.4.1 && <0.7,
    servant >=0.20.2 && <0.21,

  -- Other dependencies: Lower bound around what is in the latest Stackage LTS.
  -- Here can be exceptions if we really need features from the newer versions.
  build-depends:
    aeson,
    async,
    case-insensitive,
    cloudflare-worker,
    containers,
    exceptions >=0.10.0 && <0.11,
    ghc-wasm-compat,
    ghc-wasm-jsobjects,
    http-types >=0.12.2 && <0.13,
    mime-types,
    network-uri,
    safe-exceptions,
    streaming-bytestring,
    tagged >=0.8.6 && <0.9,
    transformers-base >=0.4.5.2 && <0.5,
    unliftio-core,
    wasm-linear-base,
    web-sys-hs,

  if !os(wasi)
    build-depends: ghc-wasm-compat
    ghc-options:
      -fplugin
      GHC.Wasm.FFI.Plugin
  hs-source-dirs: src

executable greet
  import: extensions
  import: ghc-options
  main-is: greet.hs
  hs-source-dirs: example
  build-depends:
    aeson >=1.4.1.0 && <3,
    base,
    base-compat,
    ghc-wasm-jsobjects,
    servant-cloudflare-workers,
    text,

  ghc-options: -O2

  if os(wasi)
    ghc-options:
      -no-hs-main
      -optl-mexec-model=reactor
      "-optl-Wl,--export=handlers"
  else
    build-depends: ghc-wasm-compat
    ghc-options:
      -fplugin
      GHC.Wasm.FFI.Plugin
